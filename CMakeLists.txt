cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)
set (PROJECT_NAME "gf_complete")
project (${PROJECT_NAME})

set (GFC_MAJOR_VERSION 1)
set (GFC_MINOR_VERSION 0)
set (GFC_PATCH_VERSION 0)

set (CMAKE_MODULE_PATH  "${CMAKE_SOURCE_DIR}/cmake/modules")

option (BUILD_TESTS "Build the ${PROJECT_NAME} test binaries" OFF)
option (WITH_SSE    "Enables SSEx SIMD extensions"            ON)
option (WITH_AVX    "Enables AVXx SIMD extensions"            OFF)

set (GFC_VERSION_STRING
     "${GFC_MAJOR_VERSION}.${GFC_MINOR_VERSION}.${GFC_PATCH_VERSION}")

message (STATUS "Running CMake version ${CMAKE_VERSION}")
message (STATUS "Running CMake for ${PROJECT_NAME} ${DVAULT_VERSION_STRING}")

# check if we are building a 64 or 32 bit binary
if (CMAKE_SIZEOF_VOID_P EQUAL 8)
  message (STATUS "Building a 64bit binary")
  set (X86_64 TRUE)
else (CMAKE_SIZEOF_VOID_P EQUAL 8)
  message (STATUS "Building a 32bit binary")
  set (X86 TRUE)
endif (CMAKE_SIZEOF_VOID_P EQUAL 8)

# gather information about CPU's SIMD features
include (GetCpuFeatures)
set (SIMD_COMPILER_FLAGS "")
set (SIMD_COMPILER_OPTIONS "")

if (WITH_SSE)
  if (SUPPORTS_SSE)
    message (STATUS "Enabling SSE support")
    set (HAVE_SSE "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSE=yes)
    if (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} /arch:SSE)
    else (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -msse)
    endif (WIN32)
  endif (SUPPORTS_SSE)
  if (SUPPORTS_SSE2 AND X86_64)
    message (STATUS "Enabling SSE 2 support")
    set (HAVE_SSE2 "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSE2=yes)
    if (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} /arch:SSE2)
    else (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -msse2)
    endif (WIN32)
  endif (SUPPORTS_SSE2 AND X86_64)
  if (SUPPORTS_SSE3 AND X86_64)
    message (STATUS "Enabling SSE 3 support")
    set (HAVE_SSE3 "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSE3=yes)
    if (NOT WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -msse3)
    endif (NOT WIN32)
  endif (SUPPORTS_SSE3 AND X86_64)
  if (SUPPORTS_SSSE3 AND X86_64)
    message (STATUS "Enabling SSSE 3 support")
    set (HAVE_SSSE3 "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSSE3=yes)
    if (NOT WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -mssse3)
    endif (NOT WIN32)
  endif (SUPPORTS_SSSE3 AND X86_64)
  if (SUPPORTS_SSE41 AND X86_64)
    message (STATUS "Enabling SSE 4.1 support")
    set (HAVE_SSE4 "yes")
    set (HAVE_SSE4_1 "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSE4=yes)
    if (NOT WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -msse4 -msse4.1)
    endif (NOT WIN32)
  endif (SUPPORTS_SSE41 AND X86_64)
  if (SUPPORTS_SSE42 AND X86_64)
    message (STATUS "Enabling SSE 4.2 support")
    set (HAVE_SSE4 "yes")
    set (HAVE_SSE4_2 "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSE4=yes)
    if (NOT WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -msse4 -msse4.2)
    endif (NOT WIN32)
  endif (SUPPORTS_SSE42 AND X86_64)
  if (SUPPORTS_PCLMUL AND X86_64)
    message (STATUS "Enabling SSE 4 PCLMUL support")
    set (HAVE_SSE4_PCLMUL "yes")
    set (SIMD_COMPILER_OPTIONS ${SIMD_COMPILER_OPTIONS} -DINTEL_SSE4_PCLMUL=yes)
    if (NOT WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -mpclmul)
    endif (NOT WIN32)
  endif (SUPPORTS_PCLMUL AND X86_64)
else (WITH_SSE)
  message (STATUS "Disabling SSE instruction set altogether")
endif (WITH_SSE)

if (WITH_AVX)
  if (SUPPORTS_AVX AND X86_64)
    message (STATUS "Enabling AVX 1 support")
    set (HAVE_AVX "yes")
    if (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} /arch:avx)
    else (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -mavx)
    endif (WIN32)
  endif (SUPPORTS_AVX AND X86_64)
  if (SUPPORTS_AVX2 AND X86_64)
    message (STATUS "Enabling AVX 2 support")
    set (HAVE_AVX2 "yes")
    if (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} /arch:avx2)
    else (WIN32)
      set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} -mavx2)
    endif (WIN32)
  endif (SUPPORTS_AVX2 AND X86_64)
else (WITH_AVX)
  message (STATUS "Disabling AVX instruction set altogether")
endif (WITH_AVX)

set (SIMD_COMPILER_FLAGS ${SIMD_COMPILER_FLAGS} ${SIMD_COMPILER_OPTIONS})

# gather information about memory alignment functions
include (CheckFunctionExists)
check_function_exists (memalign       HAVE_MEMALIGN)
check_function_exists (posix_memalign HAVE_POSIX_MEMALIGN)

set (GFC_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/include")

configure_file("${CMAKE_SOURCE_DIR}/include/config.h.cmake.in"
               "${CMAKE_BINARY_DIR}/config.h")

add_subdirectory (src)

if (BUILD_TESTS)
  add_subdirectory (test)
endif (BUILD_TESTS)

# NOTE(rmeusel): we are currently not compiling the 'tools' and 'examples',
#                since we are not interested in using the command line tools

